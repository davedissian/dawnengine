# Dawn Engine
# Written by David Avedissian (c) 2012-2019 (git@dga.me.uk)

message(STATUS "Setting up external dependencies...")
add_subdirectory(external)

# Source: https://github.com/google/flatbuffers/blob/master/CMake/FindFlatBuffers.cmake
function(FLATBUFFERS_GENERATE_C_HEADERS Name)
    set(FLATC_OUTPUTS)
    foreach(FILE ${ARGN})
        get_filename_component(FLATC_OUTPUT ${FILE} NAME_WE)
        set(FLATC_OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/flatbuffers/${FLATC_OUTPUT}_generated.h")
        list(APPEND FLATC_OUTPUTS ${FLATC_OUTPUT})

        add_custom_command(OUTPUT ${FLATC_OUTPUT}
            COMMAND ${FLATBUFFERS_FLATC_EXECUTABLE}
                ARGS -c -o "${CMAKE_CURRENT_BINARY_DIR}/flatbuffers/" ${FILE}
            COMMENT "Building C++ header for ${FILE}"
            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
    endforeach() 
    set(${Name}_OUTPUTS ${FLATC_OUTPUTS} PARENT_SCOPE)
endfunction()

set(FLATBUFFER_DEFINITION_FILES
    net/protocol/protocol.fbs
    net/protocol/to_client.fbs
    net/protocol/to_server.fbs)

FLATBUFFERS_GENERATE_C_HEADERS(NetProtocol ${FLATBUFFER_DEFINITION_FILES})

set(SOURCE_FILES
    core/io/File.cpp
    core/io/File.h
    core/io/FileSystem.cpp
    core/io/FileSystem.h
    core/io/InputStream.cpp
    core/io/InputStream.h
    core/io/OutputStream.cpp
    core/io/OutputStream.h
    core/io/Path.cpp
    core/io/Path.h
    core/io/StringInputStream.cpp
    core/io/StringInputStream.h
    core/math/Colour.h
    core/math/Colour.cpp
    core/math/Defs.h
    core/math/MathGeoLib.h
    core/math/Noise.cpp
    core/math/Noise.h
    core/math/Rect.cpp
    core/math/Rect.h
    core/math/StringHash.h
    core/math/Vec2i.cpp
    core/math/Vec2i.h
    core/math/Vec3i.cpp
    core/math/Vec3i.h
    core/math/Vec4i.cpp
    core/math/Vec4i.h
    core/platform/Defines.h
    core/platform/Windows.h
    core/App.h
    core/Collections.h
    core/CommandLine.cpp
    core/CommandLine.h
    core/Concurrency.cpp
    core/Concurrency.h
    core/Context.cpp
    core/Context.h
    core/Delegate.h
    core/Engine.cpp
    core/Engine.h
    core/EventData.h
    core/EventSystem.cpp
    core/EventSystem.h
    core/FixedMemoryPool.h
    core/GameMode.cpp
    core/GameMode.h
    core/GameSession.cpp
    core/GameSession.h
	core/Handle.h
    core/Log.cpp
    core/Log.h
    core/Memory.cpp
    core/Memory.h
    core/Module.cpp
    core/Module.h
    core/Object.cpp
    core/Object.h
    core/Preprocessor.h
    core/StringUtils.cpp
    core/StringUtils.h
    core/Timer.cpp
    core/Timer.h
    core/Type.h
    input/Input.cpp
    input/Input.h
    net/transport/InProcessTransport.cpp
    net/transport/InProcessTransport.h
    net/transport/ReliableUDPTransport.cpp
    net/transport/ReliableUDPTransport.h
    net/transport/Transport.h
    net/transport/Yojimbo.h
    net/BitStream.cpp
    net/BitStream.h
    net/CNetData.cpp
    net/CNetData.h
    net/CNetTransform.cpp
    net/CNetTransform.h
    net/NetEntityPipeline.cpp
    net/NetEntityPipeline.h
    net/NetGameMode.cpp
    net/NetGameMode.h
    net/NetInstance.cpp
    net/NetInstance.h
    net/NetMode.h
    net/NetRole.h
    net/RepProperty.h
    net/RepProperty.i.h
    net/Rpc.cpp
    net/Rpc.h
    net/Rpc.i.h
    renderer/rhi/GL.h
    renderer/rhi/GLRenderContext.cpp
    renderer/rhi/GLRenderContext.h
    renderer/rhi/NullRenderContext.cpp
    renderer/rhi/NullRenderContext.h
    renderer/rhi/RHIRenderer.cpp
    renderer/rhi/RHIRenderer.h
    renderer/rhi/SPIRV.h
    renderer/rhi/VertexDecl.cpp
    renderer/rhi/VertexDecl.h
    renderer/BillboardSet.cpp
    renderer/BillboardSet.h
    renderer/CCamera.cpp
    renderer/CCamera.h
    renderer/CustomMeshRenderable.cpp
    renderer/CustomMeshRenderable.h
    renderer/FrameBuffer.cpp
    renderer/FrameBuffer.h
    renderer/GLSL.h
    renderer/IndexBuffer.cpp
    renderer/IndexBuffer.h
    renderer/Material.cpp
    renderer/Material.h
    renderer/Mesh.cpp
    renderer/Mesh.h
    renderer/MeshBuilder.cpp
    renderer/MeshBuilder.h
    renderer/Node.cpp
    renderer/Node.h
    renderer/Program.cpp
    renderer/Program.h
    renderer/Renderable.h
    renderer/Renderable.cpp
    renderer/Renderer.cpp
    renderer/Renderer.h
    renderer/RenderPipeline.cpp
    renderer/RenderPipeline.h
    renderer/SceneGraph.cpp
    renderer/SceneGraph.h
    renderer/Shader.cpp
    renderer/Shader.h
    renderer/StbImage.h
    renderer/SystemPosition.cpp
    renderer/SystemPosition.h
    renderer/Texture.cpp
    renderer/Texture.h
    renderer/TriangleBuffer.cpp
    renderer/TriangleBuffer.h
    renderer/VertexBuffer.cpp
    renderer/VertexBuffer.h
    resource/Resource.cpp
    resource/Resource.h
    resource/ResourceCache.cpp
    resource/ResourceCache.h
    resource/TextResource.cpp
    resource/TextResource.h
    scene/BulletDynamics.h
    scene/CLinearMotion.h
    scene/CameraController.cpp
    scene/CameraController.h
    scene/Component.cpp
    scene/Component.h
    scene/CSceneNode.cpp
    scene/CSceneNode.h
    scene/Entity.cpp
    scene/Entity.h
    scene/PhysicsScene.cpp
    scene/PhysicsScene.h
    scene/SLinearMotion.cpp
    scene/SLinearMotion.h
    scene/SceneManager.cpp
    scene/SceneManager.h
    script/LuaVM.cpp
    script/LuaVM.h
    script/Sol.h
    ui/Imgui.h
    ui/UserInterface.cpp
    ui/UserInterface.h
    Base.h
    Input.h
    Net.h
    Renderer.h
    Resource.h
    Scene.h
    UI.h)

# Project
set(BUILD_SHARED_LIBS OFF)
add_library(DwEngine ${SOURCE_FILES} ${FLATBUFFER_DEFINITION_FILES} ${NetProtocol_OUTPUTS})
enable_cpp17(DwEngine)
enable_maximum_warnings(DwEngine)
set_output_dir(DwEngine ${CMAKE_BINARY_DIR}/lib)
if(BUILD_SHARED_LIBS)
    set_target_properties(DwEngine PROPERTIES COMPILE_FLAGS "-DDW_BUILD -DDW_DLL")
endif()
if(APPLE)
    set_target_properties(DwEngine PROPERTIES COMPILE_FLAGS "-D_LIBCPP_DISABLE_AVAILABILITY")
endif()
target_include_directories(DwEngine PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}
    scene/ontology/include)
target_include_directories(DwEngine PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/flatbuffers)

# Copy over shared library dependencies
set(DEPS_DIR ${CMAKE_BINARY_DIR}/dependencies/install/lib)
get_target_property(LIB_DIR DwEngine LIBRARY_OUTPUT_DIRECTORY)
if(APPLE AND BUILD_SHARED_LIBS)
    set_target_properties(DwEngine PROPERTIES FRAMEWORK TRUE)
endif()

# Random extras
mirror_physical_directories(${SOURCE_FILES} ${FLATBUFFER_DEFINITION_FILES})
set_target_properties(DwEngine PROPERTIES DEBUG_POSTFIX _d)

# Add include dirs and libraries
target_include_directories(DwEngine PRIVATE ${INCLUDE_DIRS})
target_link_libraries(DwEngine ${LIBS})

# Tests.
enable_testing()

set(TEST_FILES
    core/io/FileSystemTest.cpp
    core/io/FileTest.cpp
    core/io/StringInputStreamTest.cpp
    testing/Testing.h)

add_executable(DwEngineTests ${TEST_FILES})
mirror_physical_directories(${TEST_FILES})
enable_cpp14(DwEngineTests)
target_link_libraries(DwEngineTests DwEngine gtest gtest_main)
target_include_directories(DwEngineTests SYSTEM PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/testing)
set_target_properties(DwEngineTests PROPERTIES DEBUG_POSTFIX "")

include(GoogleTest)
gtest_add_tests(
    TARGET DwEngineTests
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
